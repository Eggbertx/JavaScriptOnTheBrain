---
import path from "path";
import gamesListImport from "../../data/games.yaml";
import BaseLayout from "../../layouts/BaseLayout.astro";
import GameLinksBar from "../../components/GameLinksBar.astro";
import { fixLinks, prependBasePath } from "../../scripts/util";

const gamesList:GameListItem[] = gamesListImport.map(game => {
	if(!game.link) {
		throw new Error(`Game link is missing for game: ${game.name}`);
	}

	return {
		...game,
		link: prependBasePath(game.link),
		gameScripts: game.gameScripts?.map((script:RuntimeScript) => {
			if(!script.src) {
				throw new Error(`Game script source is missing for game: ${game.name}`);
			}
			return {
				...script,
				src: script.src
			};
		}),
		gameID: path.basename(game.link).replaceAll(".html", ""),
	}
});

export function getStaticPaths() {
	return gamesListImport.map(game => {
		return {
			params: { game: path.basename(game.link).replaceAll(".html", "") }
		};
	});
}

const activeGame:GameListItem|undefined = (gamesList as GameListItem[]).find(game => game.gameID === Astro.params.game);

if(!activeGame) {
	throw new Error(`Game not found: ${Astro.params.game}`);
}
const debug = import.meta.env.DEBUG_GAMES?true:false;
const articleClass = activeGame.gameLinksHorizontal?"game-info hlinks":"game-info vlinks";
---
<BaseLayout
	activePage={(activeGame?.gameID) ?? "games"}
	pageTitle={activeGame?.name}
	gameScripts={activeGame.gameScripts}
	hasTitleHeader={true}
	activeTab="Games">
		{debug && <script is:inline>
			window.debugGames = true;
		</script>}
		<section id="gameplay-area"></section>
		<section class={articleClass}>
			<article>
				{activeGame.newGamePageDescriptionHTML?
					<p set:html={fixLinks(activeGame.newGamePageDescriptionHTML)}></p>:
					<p set:html={fixLinks(activeGame.gamePageDescriptionHTML ?? "TODO")}></p>
				}
			</article>
			{activeGame.gameLinks && 
				<GameLinksBar gameLinks={activeGame.gameLinks} isHorizontal={activeGame.gameLinksHorizontal} />
			}
		</section>
</BaseLayout>